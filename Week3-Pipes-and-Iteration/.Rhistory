# Using the dot place-holder
"Ceci n'est pas une pipe" %>% gsub("une", "un", .)
library(magrittr)
# Basic use:
iris %>% head
# Use with lhs as first argument
iris %>% head(10)
# Basic use:
iris %>% head()
# Using the dot place-holder
"Ceci n'est pas une pipe" %>% gsub("une", "un", .)
########################################################
# Workshop Exercise
########################################################
library(parathyroidSE)
data(parathyroidExonsSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("parathyroidSE")
########################################################
# Workshop Exercise
########################################################
library(parathyroidSE)
data(parathyroidExonsSE)
cm <- assay(parathyroidExonsSE)[1:5000,]
View(cm)
View(parathyroidExonsSE)
pheatmap(cm)
cm <- as.matrix(cm)
pheatmp(cm)
library(pheatmap)
pheatmp(cm)
pheatmap(cm)
colname <- colData(parathyroidExonsSE)
View(colname)
colname
colname <- as.data.frame(colData(parathyroidExonsSE)
)
View(colname)
LETTERS[sample(1:10)]
sample(1:10) %>% paste0(LETTERS[.])
library(magrittr)
sample(1:10) %>% paste0(LETTERS[.])
LETTERS
sample(1:10)
LETTERS[.]
# This can be avoided:
rnorm(100) %>%
{c(min(.), mean(.), max(.))} %>%
floor()
{c(min(rnorm(100)), mean(rnorm(100)), max(rnorm(100)))}
rnorm(100) %>%
{c(min(.), mean(.), max(.))}
iris %>%
{
size <- sample(1:10, size = 1)
rbind(head(., size), tail(., size))
}
sample(1:10, size = 1)
sample(1:10)
# Lambda expressions:
iris %>%
{
size <- sample(1:10, size = 1)
rbind(head(., size), tail(., size))
}
{
size <- sample(1:10, size = 1)
rbind(head(., size), tail(., size))
}
{
size <- sample(1:10, size = 1)
rbind(head(iris, size), tail(iris, size))
}
# renaming in lambdas:
iris %>%
{
my_data <- .
size <- sample(1:10, size = 1)
rbind(head(my_data, size), tail(my_data, size))
}
# Building unary functions with %>%
trig_fest <- . %>% tan %>% cos %>% sin
trig_fest
# Building unary functions with %>%
trig_fest <- . %>% tan
1:10 %>% trig_fest
#>  [1]  0.0133878 -0.5449592  0.8359477  0.3906486 -0.8257855  0.8180174
#>  [7]  0.6001744  0.7640323  0.7829771  0.7153150
trig_fest(1:10)
################################################
for (i in seq(0, 20, 5)) {
print(i)
}
################################################
for (i in seq(0, 20, 5)) {
print(i)
}
