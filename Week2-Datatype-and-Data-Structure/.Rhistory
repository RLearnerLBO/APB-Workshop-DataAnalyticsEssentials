datasets
datasets()
datasets::CO2
datasets::DNase
datasets::HairEyeColor
datasets::occupationalStatus
datasets::WWWusage
library(GEOquery)
gds <- getGEO("GSM11805")
View(gds)
gsm <- getGEO(filename=system.file("extdata/GSM11805.txt.gz",package="GEOquery"))
View(gds)
gds@dataTable@columns
gds@dataTable@table
gse <- getGEO("GSE781",GSEMatrix=TRUE)
gse <- getGEO("GSE781",GSEMatrix=TRUE)
gse <- getGEO(filename=system.file("extdata/GSE781_family.soft.gz",package="GEOquery"))
View(gse)
View(gse)
gse@header
gse@gsms[["GSM11805"]]@dataTable@columns
gse@gsms[["GSM11805"]]@dataTable@table[["ID_REF"]]
gse@gsms[["GSM11805"]]@header
gse@gpls[["GPL96"]]@dataTable
v <- True
v <- TRUE
class(v)
typeof(v)
v <- 23.5
v <- 2L
v <- 2+5i
v <- "TRUE"
typeof(v)
v <- charToRaw("Hello")
v
# Vector, same type in 1dimension
apple <- c('red','green',"yellow")
print(apple)
class(apple)
apple <- as.factor(apple)
class(apple)
apple
# Matrices,   same type in 2 dimension
M = matrix( c('a','a','b','c','b','a'), nrow = 2, ncol = 3, byrow = TRUE)
M
# Matrices,   same type in 2 dimension
M = matrix( c('a','a','b','c','b','a'), nrow = 3, ncol = 2, byrow = TRUE)
print(M)
#Arrays, multiple type in 2dimensions
a <- array(c('green','yellow'),dim = c(3,3,2))
print(a)
apple_colors <- c('green','green','yellow','red','red','red','green')
apple_colors  <- as.factor(apple_colors )
apple_colors
print(nlevels(factor_apple))
factor_apple <- factor(apple_colors)
# Print the factor.
print(factor_apple)
print(nlevels(factor_apple))
apple_colors <- c('green','Very green','yellow','Very red','red','red','green')
apple_colors  <- as.factor(apple_colors )
apple_colors
x <- list("a" = c(1,2,3,5,6,7,8), "b" = c(TRUE,"hello"), "c" = 1:3)
View(x)
x[["a"]]
x[[a]]
x[[1]]
x[[3]]
x[[2]]
x[[3]]
x[1]
x[[1]]
BMI <- 	data.frame(
gender = c("Male", "Male","Female"),
height = c(152, 171.5, 165),
weight = c(81,93, 78),
Age = c(42,38,26)
)
View(BMI)
print(BMI)
BMI <- as.tibble(BMI)
library(tidyverse)
BMI <- as.tibble(BMI)
BMI <- as_tibble(BMI)
BMI
View(BMI)
View(x)
#S4 Objects
setClass("news4class",representation(x1="numeric",x2="numeric",x3="character"))
data1<-new("news4class",x1=rnorm(20),x2=rexp(20,1.12),x3=c("TRUE","FALSE"))
View(data1)
setClass("news4class2",representation(x1="integer",x2="numeric"))
data2<-new("news4class2",x1=rpois(200,5),x2=rexp(50,1.12))
data2
View(data2)
rexp(20,1.12)
rexp(50,1.12)
plot(rexp(50,1.12))
#S4 Objects
setClass("news4class1",representation(x1="numeric",x2="numeric",x3="character"))
data1<-new("news4class1",x1=rnorm(20),x2=rexp(20,1.12),x3=c(12,312,312,321))
data1
data1<-new("news4class1",x1=rnorm(20),x2=rexp(20,1.12),x3=c(12,312,312,321))
#S4 Objects
setClass("news4class1",representation(x1="numeric",x2="numeric",x3="character"))
data1<-new("news4class1",x1=rnorm(20),x2=rexp(20,1.12),x3=c("dsajkldsa","djsaklds"))
data1
# Matrices,   same type in 2 dimension
M <- matrix( c('a','a','b','c','b','a'), nrow = 3, ncol = 2, byrow = TRUE)
print(M)
iris <- datasets::iris
datasets::iris
>
datasets::iris
datasets::airquality
datasets
dataset
datasets()
library(datasets)
datasets()
dataset
dataset()
date()
data()
#Data Frame, 2 dimensional (?), same datatype in the same columns
# Essential multiple list joined togethed
# Create the data frame.
BMI <- 	data.frame(
gender = c("Male", "Male","Female"),
height = c(152, 171.5, 165),
weight = c(81,93, 78),
Age = c(42,38,26)
)
#S4 Objects
setClass("news4class1",representation(x1="numeric",x2="numeric",x3="character"))
data1<-new("news4class1",x1=rnorm(20),x2=rexp(20,1.12),x3=c(TRUE,FALSE))
#S4 Objects
setClass("news4class1",representation(x1="numeric",x2="numeric",x3="character"))
data1<-new("news4class1",x1=rnorm(20),x2=rexp(20,1.12),x3=c("dshjkfdhjkfds","fdsjkfljdskl"))
data1
#S4 Objects
setClass("news4class1",representation(x1="numeric",x2="numeric",x3="logical"))
data1<-new("news4class1",x1=rnorm(20),x2=rexp(20,1.12),x3=c(TRUE,FALSE))
data1
View(data1)
x <- dist()
library(datesets)
library(datasets)
data()
iris <- datasets::iris
View(iris)
class(iris)
typeof(iris)
AirPassengers <- datasets::AirPassengers
class(AirPassengers)
AirPassengers <- as.data.frame(AirPassengers)
View(AirPassengers)
airquality <- as.data.frame(airquality)
class(airquality)
View(airquality)
airquality$Wind
mtcars <- dataset::mtcars
mtcars <- datasets::mtcars
View(mtcars)
AirPassengers <- datasets::AirPassengers
AirPassengers <- as.vector( AirPassengers)
AirPassengers <- as.list( AirPassengers)
View(AirPassengers)
AirPassengers <- as.vector( AirPassengers)
AirPassengers <- as.vector( AirPassengers)
View(AirPassengers)
AirPassengers <- as.vector(unlist(AirPassengers))
AirPassengers <- datasets::AirPassengers
AirPassengers <- as.data.frame(AirPassengers)
View(AirPassengers)
CO2 <- datasets::CO2
View(CO2)
CO2$Plant
HairEyeColor <- datasets::HairEyeColor
HairEyeColor
class(HairEyeColor)
HairEyeColor <- as.data.frame(HairEyeColor)
View(HairEyeColor)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("parathyroidSE")
library(parathyroidSE)
library(GEOquery)
library("parathyroidSE")
data(exonsByGene)
View(exonsByGene)
## library("GenomicFeatures")
## hse <- makeTranscriptDbFromBiomart(biomart="ensembl",
##                                    dataset="hsapiens_gene_ensembl")
## exonsByGene <- exonsBy(hse, by="gene")
library("GenomicFeatures")
hse <- makeTranscriptDbFromBiomart(biomart="ensembl",dataset="hsapiens_gene_ensembl")
library(parathyroidSE)
hse <- makeTranscriptDbFromBiomart(biomart="ensembl",dataset="hsapiens_gene_ensembl")
exonsByGene@partitioning@NAMES
library("GenomicFeatures")
hse <- makeTranscriptDbFromBiomart(biomart="ensembl",
dataset="hsapiens_gene_ensembl")
View(exonsByGene)
exonsByGene@unlistData
exonsByGene@elementMetadata
exonsByGene@metadata
gse <- getGEO(filename=system.file("extdata/GSE781_family.soft.gz",package="GEOquery"))
breastcancerGSE <- getGEO("GSE177054")
View(breastcancerGSE)
breastcancerGSE[["GSE177054_series_matrix.txt.gz"]]@phenoData
breastcancerGSE[["GSE177054_series_matrix.txt.gz"]]@assayData[["exprs"]]
breastcancerGSE[["GSE177054_series_matrix.txt.gz"]]@phenoData@data
library(DESeq2)
dds <- makeExampleDESeqDataSet()
View(dds)
res <- results(dds, name="condition_trt_vs_untrt")
dds <- DESeq(dds)
View(dds)
library(DESeq2)
dds <- makeExampleDESeqDataSet()
dds2 <-DESeq(dds)
View(dds2)
dds2 <- DESeq2::DESeq(dds)
newGSE <- getGEO("GSE160668")
View(newGSE)
newGSE[["GSE160668_series_matrix.txt.gz"]]@phenoData@data
View(gse)
library(parathyroidSE)
data(exonsByGene)
View(exonsByGene)
exonsByGene@partitioning@end
library(parathyroidSE)
data(parathyroidExonsSE)
View(parathyroidExonsSE)
parathyroidExonsSE@assays
library(parathyroidSE)
data(parathyroidExonsSE)
cm <- assay(parathyroidExonsSE)[1:5000,]
View(cm)
reticulate::conda_install("numpy")
reticulate::conda_install(packages = "numpy")
