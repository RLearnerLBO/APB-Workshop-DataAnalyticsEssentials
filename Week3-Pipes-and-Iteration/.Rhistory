}
# Lambda expressions:
## Simply put, a lambda function is just like any normal python function,
## except that it has no name when defining it, and it is contained in one line of code
iris %>%
{
size <- sample(1:10, size = 1)
rbind(head(., size), tail(., size))
}
# Lambda expressions:
## Simply put, a lambda function is just like any normal python function,
## except that it has no name when defining it, and it is contained in one line of code
iris %>%
{
size <- sample(1:10, size = 1)
rbind(head(., size), tail(., size))
}
# Lambda expressions:
## Simply put, a lambda function is just like any normal python function,
## except that it has no name when defining it, and it is contained in one line of code
iris %>%
{
size <- sample(1:10, size = 1)
rbind(head(., size), tail(., size))
}
# renaming in lambdas:
iris %>%
{
my_data <- .
size <- sample(1:10, size = 1)
rbind(head(my_data, size), tail(my_data, size))
}
max(1)
max(1,2)
1:10
trig_fest <- . %>% tan %>% sin %>% cos
1:10 %>% trig_fest
rnorm(123)
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rpois(100))
hist(rpois(n = 1100))
hist(rpois(n = 1100,lambda = 1))
hist(rnorm(100))
################################################################################
## Iteration
################################################################################
name <- c("Donald", "Joe", "Hillary")
age <- c(74, 78, 65)
city <- c("New york", "Denver", "Dallas")
df <- data.frame(name, age, city)
for (i in names(df)) {
print(df[i])
}
names(df)
View(df)
print(df[1])
print(df[2])
print(df[3])
names(df)
df["name"]
df["age"]
df["city"]
for (i in names(df)) {
print(df[i])
}
seq(1,100)
seq(1,300)
seq(1,30seq(0, 20, 5)0)
seq(0, 20, 5)
seq(0, 24, 5)
################################################
for (i in seq(0, 20, 5)) {
print(i)
}
for (x in fruits) {
if (x == "cherry") {
break
}
print(x)
}
################################################
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
if (x == "cherry") {
break
}
print(x)
}
for (x in fruits) {
if (x == "cherry") {
break
}
print(x)
}
################################################
fruits <- list("apple", "banana", "cherry","durian","rambutan")
for (x in fruits) {
if (x == "cherry") {
break
}
print(x)
}
################################################
fruits <- list("apple", "banana", "durian","cherry","rambutan")
for (x in fruits) {
if (x == "cherry") {
break
}
print(x)
}
################################################
fruits <- list("apple", "banana", "durian","cherry","rambutan")
for (x in fruits) {
if (x == "cherry") {
print("we dont like cherry")
break
}
print(x)
}
################################################
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
if (x == "banana") {
next
}
print(x)
}
################################################
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
if (x == "banana") {
print("Something else")
next
}
print(x)
}
################################################
adj <- list("red", "big", "tasty")
fruits <- list("apple", "banana", "cherry")
for (x in adj) {
for (y in fruits) {
print(paste(x, y))
}
}
for (x in adj) {
for (y in fruits) {
print(paste(x, y))
}
}
for (y in adj) {
for (x in fruits) {
print(paste(x, y))
}
}
################################################
mtrx <- matrix(nrow = 30, ncol = 30)
################################################
mtrx <- matrix(nrow = 30, ncol = 30)
View(mtrx)
dim(matrix)
################################################
mtrx <- matrix(nrow = 30, ncol = 30)
dim(mtrx)
################################################
mtrx <- matrix(nrow = 20, ncol = 30)
dim(mtrx)
# For each row and for each column, assign values
# based on position: product of two indexes
for (i in 1:dim(mtrx)[1]) {
for (j in 1:dim(mtrx)[2]) {
mtrx[i, j] = paste(i,j)
}
}
# Display the upper left 5x5 chunk
mtrx[1:5, 1:5]
m1 <- matrix(C<-(1:10),nrow=5, ncol=6)
m1
a_m1 <- apply(m1, 2, sum)
a_m1
C<-(1:10)
C
m1 <- matrix(C<-(1:9),nrow=5, ncol=6)
m1
m1 <- matrix(C<-(1:5),nrow=5, ncol=6)
m1
m1 <- matrix(C<-(1:10),nrow=5, ncol=6)
m1
a_m1 <- apply(m1, 2, sum)
a_m1
b_m1 <- apply(m1, 1, sum)
b_m1
#############################################################
#tapply apply the function to two list
#############################################################
iris$Sepal.Length
iris$Species
tapply(iris$Sepal.Length, iris$Species, mean)
iris <- iris
View(iris)
#############################################################
# Using Lapply (list apply), sapply(vector/matrix apply),
#############################################################
movies <- c("SPYDERMAN","BATMAN","VERTIGO","CHINATOWN")
#output as a list
movies_lower <-lapply(movies, tolower)
movies_lower
#output as a vector/matrix
movies_lower <- sapply(movies, tolower)
movies_lower
########################################################
# Workshop Exercise
########################################################
library(parathyroidSE)
data(parathyroidExonsSE)
cm <- assay(parathyroidExonsSE)[1:5000,]
cm <- assay(parathyroidExonsSE)[1:5000,]
View(cm)
png(plot(rnorm(1000)))
dev.off()
png(plot(rnorm(1000)))
png(file="save",plot(rnorm(1000)))
png(file="save.png",plot(rnorm(1000)))
x <- colData(parathyroidExonsSE)
View(x)
x <- as.data.frame(colData(parathyroidExonsSE))
View(x)
cm_log10 <- log10(cm)
for(i in 1:27){
hist(cm[,i])
}
for(i in 1:27){
hist(cm_log10[,i],xlab = i)
}
cm_log10 <- log10(cm)
for(i in 1:27){
hist(cm_log10[,i],xlab = i)
}
for(i in 1:27){
hist(cm[,i],xlab = i)
}
#combining plot
par(mfrow=c(2,2))
for(i in 1:2){
hist(cm[,i],xlab = i)
}
for(i in 1:2){
hist(cm_log10[,i],xlab = i)
}
pheatmap(cm_log10)
#3. Using pheatmap, identify possible cluster of samples and separate the sample
#    into a minimal of 2 cluster
library(pheatmap)
pheatmap(cm_log10)
cm_heatmap <- pheatmap(cm_log10)
hist(cm[,1])
dev.off()
hist(cm[,1])
#3. Using pheatmap, identify possible cluster of samples and separate the sample
#    into a minimal of 2 cluster
library(pheatmap)
cm_heatmap <- pheatmap(cm_log10)
cm_log10 <- log10(cm+1()
)
cm_log10 <- log10(cm+1)
#3. Using pheatmap, identify possible cluster of samples and separate the sample
#    into a minimal of 2 cluster
library(pheatmap)
cm_heatmap <- pheatmap(cm_log10)
cluster_gene <- cm_heatmap$
dsa
View(cm_heatmap)
cm_heatmap <- pheatmap(cm_log10,kmeans_k = 2)
View(cm_heatmap)
cluster_gene <- cm_heatmap$kmeans$cluster
cluster_gene ==1
cm_cluster1 <- cm_log10[cluster_gene ==1,]
View(cm_cluster1)
cluster_gene_chain <- cm_heatmap %>% pheatmap(. ,kmeans_k = 2)
cluster_gene_chain <- cm_heatmap %>% pheatmap(. ,kmeans_k = 2)
cluster_gene_chain <- cm_log10 %>% pheatmap(. ,kmeans_k = 2)
cluster_gene_chain <- cm_log10 %>%
pheatmap(. ,kmeans_k = 2) %>%
.$kmeans$cluster
pheatmap(cm_log10 ,kmeans_k = 2)$kmeans$cluster
cm_log10 %>%
{
df <- .
cluster <- pheatmap(df ,kmeans_k = 2)$kmeans$cluster
}
cm_log10 %>%
{
df <- .
cluster_new <- pheatmap(df ,kmeans_k = 2)$kmeans$cluster
}
cm_log10 %>%
{
df <- .
cluster_new <- pheatmap(df ,kmeans_k = 2)$kmeans$cluster
return(cluster_new)
}
cluster <- cm_log10 %>%
{
df <- .
pheatmap(df ,kmeans_k = 2)$kmeans$cluster
}
savepng <- function(plot){
png(filename="savemasplot.png")
plot
dev.off()
}
savepng(pheatmp(cm_cluster1))
savepng(pheatmap(cm_cluster1))
pheatmap(cm_cluster1)
## Generate the two cluster CM
cm_cluster1 <- cm_log10[cluster_gene ==1,]
cm_cluster2 <- cm_log10[cluster_gene ==2,]
pheatmp(cm_cluster1)
pheatmp(cm_cluster2)
pheatmap(cm_cluster1)
pheatmap(cm_cluster2)
savepng <- function(plot){
png(filename="savemasplot.png")
plot
dev.off()
}
savepng(pheatmap(cm_cluster1))
dev.off()
dev.off()
dev.off()
savepng <- function(plot){
png(filename="savemasplot.png")
plot
dev.off()
}
savepng(pheatmap(cm_cluster1))
name <- colData(parathyroidExonsSE)
View(name)
name <- as.data.frame(colData(parathyroidExonsSE))
View(name)
cm_cluster1 <- cm_log10[,name$treatment == "Control"]
name <- as.data.frame(colData(parathyroidExonsSE))
cm_treatment_control <- cm_log10[, name$treatment == "Control"]
cm_treatment_DPN <- cm_log10[, name$treatment == "DPN"]
cm_treatment_OHT <- cm_log10[, name$treatment == "OHT"]
cm_time_24 <- cm_log10[, name$time == "24h"]
cm_time_24 <- cm_log10[, name$time == "48h"]
View(cm_time_24)
par(3,1)
pheatmap(cm_treatment_control)
pheatmap(cm_treatment_DPN)
pheatmap(cm_treatment_OHT)
dev.off()
library(ggpubr)
p1 <- pheatmap(cm_treatment_control)
p2 <- pheatmap(cm_treatment_DPN)
p3 <- pheatmap(cm_treatment_OHT)
ggarrange(p1,p2,p
)
ggarrange(p1,p2,p3)
ggarrange(as.grob(p1))
library("ggplotify")
install.packages("ggplotify")
library(ggplotify)
ggarrange(as.grob(p1))
ggarrange(as.grob(p1),as.grob(p2),as.grob(p3))
library(ggpubr)
library(ggplotify)
p1 <- cm_treatment_control %>% pheatmap() %>% as.grob()
p2 <- cm_treatment_DPN %>% pheatmap() %>% as.grob()
p3 <- cm_treatment_OHT %>% pheatmap() %>% as.grob()
ggarrange(p1,p2,p3)
p4 <- cm_time_24%>% pheatmap() %>% as.grob()
p5 <- cm_time_48 %>% pheatmap() %>% as.grob()
ggarrange(p4,p5)
cm_time_48 <- cm_log10[, name$time == "48h"]
p4 <- cm_time_24%>% pheatmap() %>% as.grob()
p5 <- cm_time_48 %>% pheatmap() %>% as.grob()
ggarrange(p4,p5)
cm_time_48 <- cm_log10[, name$time == "48h"]
p4 <- cm_time_24%>% pheatmap() %>% as.grob()
p5 <- cm_time_48 %>% pheatmap() %>% as.grob()
ggarrange(p4,p5)
ggarrange(p1, p2, p3)
i
is.na(i)
rm(i)
i
savepng <- function(plot,i=1) {
png(filename = paste(i, "savemasplot.png"))
plot
dev.off()
}
savepng(pheatmap(cm_cluster1))
savepng(pheatmap(cm_cluster1))
cm[1,1]
View(cm)
cm[1,2]
cm[,2]
hist(cm[, 1])
hist(cm[, 1])
library(parathyroidSE)
data(parathyroidExonsSE)
cm <- assay(parathyroidExonsSE)[1:5000, ]
hist(cm[, 1])
cm[,1] %>% hist()
library(magrittr)
cm[,1] %>% hist()
for (i in 1:27) {
hist(cm[, i], xlab = i)
}
View(parathyroidExonsSE)
cm_log10 <- log10(cm + 1)
for (i in 1:27) {
hist(cm_log10[, i], xlab = i)
}
plot()
hist()
barplot()
par(mfrow = c(2, 2))
for (i in 1:2) {
hist(cm[, i], xlab = i)
}
for (i in 1:2) {
hist(cm_log10[, i], xlab = i)
}
dev.off()
#Step by Step
library(pheatmap)
cm_heatmap <- pheatmap(cm_log10) #without clustering argument
View(cm_heatmap)
cm_heatmap[["kmeans"]]
cm_heatmap <- pheatmap(cm_log10, kmeans_k = 2)
View(cm_heatmap)
cluster_gene <- cm_heatmap$kmeans$cluster
cluster_gene
View(cm_log10)
cluster_gene == 1
## Generate the two cluster CM
cm_cluster1 <- cm_log10[cluster_gene == 1, ]
cm_cluster2 <- cm_log10[cluster_gene == 2, ]
View(cm_cluster1)
pheatmap(cm_cluster1)
pheatmap(cm_cluster2)
savepng(pheatmap(cm_cluster1))
for (i in 1:27) {
p <- hist(cm_log10[, i], xlab = i)
savepng(p,i)
}
name <- as.data.frame(colData(parathyroidExonsSE))
name <- as.data.frame(colData(parathyroidExonsSE))
View(name)
name$treatment == "Control"
cm_treatment_control <- cm_log10[, name$treatment == "Control"]
View(cm_treatment_control)
cm_treatment_DPN <- cm_log10[, name$treatment == "DPN"]
cm_treatment_OHT <- cm_log10[, name$treatment == "OHT"]
cm_time_24 <- cm_log10[, name$time == "24h"]
cm_time_48 <- cm_log10[, name$time == "48h"]
library(ggpubr)
library(ggplotify)
ggarrange(p1, p2, p3)
png()
ggarrange(p1, p2, p3)
p4 <- cm_time_24 %>% pheatmap() %>% as.grob()
p5 <- cm_time_48 %>% pheatmap() %>% as.grob()
ggarrange(p4, p5)
dev.off()
ggarrange(p4, p5)
library(ggpubr)
library(magrittr)
library(dplyr)
library(ggpubr)
library(ggplotify)
ggarrange(p1, p2, p3)
ggarrange(p4, p5)
heatmapc1 <- pheatmap(cm_cluster1)
heatmapc2 <-  pheatmap(cm_cluster2)
library(pheatmap)
heatmapc1 <- pheatmap(cm_cluster1)
heatmapc2 <-  pheatmap(cm_cluster2)
heatmapc2  <- as.grob(heatmapc2
)
heatmapc1 <- as.grob(heatmapc1)
heatmapc2  <- as.grob(heatmapc2)
ggarrange(p1, p2, p3,heatmapc1,heatmapc2)
View(cm)
pheatmap(cm_log10,cluster_cols = FALSE)
pheatmap(cm_log10,cluster_cols = FALSE,breaks = 5)
pheatmap(cm_log10,cluster_cols = FALSE,breaks = 3)
pheatmap(cm_log10,cluster_cols = FALSE,scale = FALSE, breaks =2_
pheatmap(cm_log10,cluster_cols = FALSE,scale = FALSE, breaks =2)
pheatmap(cm,cluster_cols = FALSE, breaks =2)
View(cm)
pheatmap(cm,cluster_cols = FALSE, breaks = cluster_information )
## Alternatively
cluster_information <- cm_log10 %>%
{
df <- .
pheatmap(df , kmeans_k = 2)$kmeans$cluster
}
pheatmap(cm,cluster_cols = FALSE, breaks = cluster_information )
pheatmap(cm,cluster_cols = FALSE, cutree_rows = 3,cutree_cols = 4)
pheatmap(cm_log10,cluster_cols = FALSE, cutree_rows = 3,cutree_cols = 4)
pheatmap(cm_log10[100,100],cluster_cols = FALSE, cutree_rows = 3,cutree_cols = 4)
pheatmap(cm_log10[100,100], cutree_rows = 3,cutree_cols = 4)
pheatmap(cm_log10[100,100], cutree_rows = 3,cutree_cols = 4)
pheatmap(cm_log10[1:100,1:100],cluster_cols = FALSE, cutree_rows = 3,cutree_cols = 4)
pheatmap(cm_log10[1:100,],cluster_cols = FALSE, cutree_rows = 3,cutree_cols = 4)
pheatmap(cm_log10[1:100,], cutree_rows = 3,cutree_cols = 4)
