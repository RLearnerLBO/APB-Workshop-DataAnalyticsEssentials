library(factoextra)
res.pca <- prcomp(iris[, -5],  scale = TRUE)
# Use points only
fviz_pca_ind(res.pca, geom="point")
# Gradient color
fviz_pca_ind(res.pca, col.ind="cos2") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=0.6)
p <- fviz_pca_ind(res.pca, label="none", habillage=iris$Species,
addEllipses=TRUE, ellipse.level=0.95)
print(p)
unix::rlimit_as()
install.packages("unix")
knitr::opts_chunk$set(echo = TRUE)
##https://www.datanovia.com/en/blog/ggplot-examples-best-reference/
##http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html#Scatterplot
#install.packages("ggplot2")
#install.packages("pheatmap")
library(ggplot2)
library(pheatmap)
library(dplyr)
library(tidyverse)
library("ggpubr")
df <- matrix(rnorm(1000),nrow=100)
iris <- iris
pheatmap(df)
pheatmap(iris[1:4])
plot(iris[,2:3])
plot(iris)
hist(iris[,2])
boxplot(Petal.Length~Species,data=iris)
plot(iris[,2:3] ,
main="The Iris Scatter Plot",
ylab="Sepal Length",
xlab="Sepal Width",
cex = 3,
xlim = c(1, 5),
ylim = c(1,7)
)
# Basic scatter plot
ggplot(mpg, aes(cty, hwy)) +
geom_point(size = 0.5)
# Jittered points
ggplot(mpg, aes(cty, hwy)) +
geom_jitter(size = 0.5, width = 0.5)
ggplot(mpg, aes(cty, hwy)) +
geom_count()
# Basic histogram with mean line
ggplot(iris, aes(Sepal.Length)) +
geom_histogram(bins = 20, fill = "white", color = "black")  +
geom_vline(aes(xintercept = mean(Sepal.Length)), linetype = 2)
ggplot(iris, aes(Sepal.Length)) +
geom_histogram(aes(fill = Species, color = Species), bins = 20,
position = "identity", alpha = 0.5) +
scale_fill_viridis_d() +
scale_color_viridis_d()
df <- mtcars %>%
rownames_to_column() %>%
as_data_frame() %>%
mutate(cyl = as.factor(cyl)) %>%
select(rowname, wt, mpg, cyl)
# Basic bar plots
ggplot(df, aes(x = rowname, y = mpg)) +
geom_col() +
rotate_x_text(angle = 45)
# Reorder row names by mpg values
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col()  +
rotate_x_text(angle = 45)
# Horizontal bar plots,
# change fill color by groups and add text labels
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col( aes(fill = cyl)) +
geom_text(aes(label = mpg), nudge_y = 2) +
coord_flip() +
scale_fill_viridis_d()
# Data
df3 <- data.frame(supp=rep(c("VC", "OJ"), each=3),
dose=rep(c("D0.5", "D1", "D2"),2),
len=c(6.8, 15, 33, 4.2, 10, 29.5))
# Line plot
ggplot(df3, aes(x = dose, y = len, group = supp)) +
geom_line(aes(linetype = supp))
# Line plot with [oint]
ggplot(df3, aes(x = dose, y = len, group = supp)) +
geom_line(aes(linetype = supp)) +
geom_point(aes(shape = supp))
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
# Basic
ggplot(ToothGrowth, aes(dose, len)) +
geom_boxplot()
# Box plot + violin plot
ggplot(ToothGrowth, aes(dose, len)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.2)
# Plot
g <- ggplot(mpg, aes(class, cty))
g + geom_boxplot(varwidth=T, fill="plum") +
labs(title="Box plot",
subtitle="City Mileage grouped by Class of vehicle",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
# Data preparation
df <- economics %>%
select(date, psavert, uempmed) %>%
gather(key = "variable", value = "value", -date)
head(df, 3)
# Multiple line plot
ggplot(df, aes(x = date, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
library(corrplot)
x <- cor(iris[1:4])
corrplot(x, method = "circle")
library(ggpubr)
# Data preparation
housetasks <- read.delim(
system.file("demo-data/housetasks.txt", package = "ggpubr"),
row.names = 1
)
head(housetasks, 4)
# Visualization
ggballoonplot(housetasks, fill = "value")+
scale_fill_viridis_c(option = "C")
library(PerformanceAnalytics)
chart.Correlation(
iris[1:4],
histogram = TRUE,
method = c("pearson")
)
# install.packages("ggdendro")
library(ggplot2)
library(ggdendro)
theme_set(theme_bw())
hc <- hclust(dist(USArrests), "ave")  # hierarchical clustering
# plot
ggdendrogram(hc, rotate = TRUE, size = 2)
library(FactoMineR)
library(factoextra)
res.pca <- prcomp(iris[, -5],  scale = TRUE)
# Use points only
fviz_pca_ind(res.pca, geom="point")
# Gradient color
fviz_pca_ind(res.pca, col.ind="cos2") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=0.6)
p <- fviz_pca_ind(res.pca, label="none", habillage=iris$Species,
addEllipses=TRUE, ellipse.level=0.95)
print(p)
# Default plot
fviz_pca_var(res.pca)
# Use points and text
fviz_pca_var(res.pca, geom = c("point", "text"))
fviz_pca_biplot(res.pca)
knitr::opts_chunk$set(echo = TRUE)
##https://www.datanovia.com/en/blog/ggplot-examples-best-reference/
##http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html#Scatterplot
#install.packages("ggplot2")
#install.packages("pheatmap")
library('ggplot2')
library('pheatmap')
library('dplyr')
library('tidyverse')
library("ggpubr")
df <- matrix(rnorm(1000),nrow=100)
iris <- iris
pheatmap(df)
pheatmap(iris[1:4])
plot(iris[,2:3])
plot(iris)
hist(iris[,2])
boxplot(Petal.Length~Species,data=iris)
plot(iris[,2:3] ,
main="The Iris Scatter Plot",
ylab="Sepal Length",
xlab="Sepal Width",
cex = 3,
xlim = c(1, 5),
ylim = c(1,7)
)
# Basic scatter plot
ggplot(mpg, aes(cty, hwy)) +
geom_point(size = 0.5)
# Jittered points
ggplot(mpg, aes(cty, hwy)) +
geom_jitter(size = 0.5, width = 0.5)
ggplot(mpg, aes(cty, hwy)) +
geom_count()
# Basic histogram with mean line
ggplot(iris, aes(Sepal.Length)) +
geom_histogram(bins = 20, fill = "white", color = "black")  +
geom_vline(aes(xintercept = mean(Sepal.Length)), linetype = 2)
ggplot(iris, aes(Sepal.Length)) +
geom_histogram(aes(fill = Species, color = Species), bins = 20,
position = "identity", alpha = 0.5) +
scale_fill_viridis_d() +
scale_color_viridis_d()
df <- mtcars %>%
rownames_to_column() %>%
as_data_frame() %>%
mutate(cyl = as.factor(cyl)) %>%
select(rowname, wt, mpg, cyl)
# Basic bar plots
ggplot(df, aes(x = rowname, y = mpg)) +
geom_col() +
rotate_x_text(angle = 45)
# Reorder row names by mpg values
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col()  +
rotate_x_text(angle = 45)
# Horizontal bar plots,
# change fill color by groups and add text labels
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col( aes(fill = cyl)) +
geom_text(aes(label = mpg), nudge_y = 2) +
coord_flip() +
scale_fill_viridis_d()
df <- mtcars %>%
rownames_to_column() %>%
as_data_frame() %>%
mutate(cyl = as.factor(cyl)) %>%
select(rowname, wt, mpg, cyl)
# Basic bar plots
ggplot(df, aes(x = rowname, y = mpg)) +
geom_col() +
rotate_x_text(angle = 45)
# Reorder row names by mpg values
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col()  +
rotate_x_text(angle = 45)
# Horizontal bar plots,
# change fill color by groups and add text labels
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col( aes(fill = cyl)) +
geom_text(aes(label = mpg), nudge_y = 2) +
coord_flip() +
scale_fill_viridis_d()
df <- mtcars %>%
rownames_to_column() %>%
as_data_frame() %>%
mutate(cyl = as.factor(cyl)) %>%
select(rowname, wt, mpg, cyl)
# Basic bar plots
ggplot(df, aes(x = rowname, y = mpg)) +
geom_col() +
rotate_x_text(angle = 45)
# Reorder row names by mpg values
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col()  +
rotate_x_text(angle = 45)
# Horizontal bar plots,
# change fill color by groups and add text labels
ggplot(df, aes(x = reorder(rowname, mpg), y = mpg)) +
geom_col( aes(fill = cyl)) +
geom_text(aes(label = mpg), nudge_y = 2) +
coord_flip() +
scale_fill_viridis_d()
# Data
df3 <- data.frame(supp=rep(c("VC", "OJ"), each=3),
dose=rep(c("D0.5", "D1", "D2"),2),
len=c(6.8, 15, 33, 4.2, 10, 29.5))
# Line plot
ggplot(df3, aes(x = dose, y = len, group = supp)) +
geom_line(aes(linetype = supp))
# Line plot with [oint]
ggplot(df3, aes(x = dose, y = len, group = supp)) +
geom_line(aes(linetype = supp)) +
geom_point(aes(shape = supp))
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
# Basic
ggplot(ToothGrowth, aes(dose, len)) +
geom_boxplot()
# Box plot + violin plot
ggplot(ToothGrowth, aes(dose, len)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.2)
# Plot
g <- ggplot(mpg, aes(class, cty))
g + geom_boxplot(varwidth=T, fill="plum") +
labs(title="Box plot",
subtitle="City Mileage grouped by Class of vehicle",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
# Data preparation
df <- economics %>%
select(date, psavert, uempmed) %>%
gather(key = "variable", value = "value", -date)
head(df, 3)
# Multiple line plot
ggplot(df, aes(x = date, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
library(corrplot)
x <- cor(iris[1:4])
corrplot(x, method = "circle")
library(ggpubr)
# Data preparation
housetasks <- read.delim(
system.file("demo-data/housetasks.txt", package = "ggpubr"),
row.names = 1
)
head(housetasks, 4)
# Visualization
ggballoonplot(housetasks, fill = "value")+
scale_fill_viridis_c(option = "C")
library(PerformanceAnalytics)
chart.Correlation(
iris[1:4],
histogram = TRUE,
method = c("pearson")
)
# install.packages("ggdendro")
library(ggplot2)
library(ggdendro)
theme_set(theme_bw())
hc <- hclust(dist(USArrests), "ave")  # hierarchical clustering
# plot
ggdendrogram(hc, rotate = TRUE, size = 2)
library(FactoMineR)
library(factoextra)
res.pca <- prcomp(iris[, -5],  scale = TRUE)
# Use points only
fviz_pca_ind(res.pca, geom="point")
# Gradient color
fviz_pca_ind(res.pca, col.ind="cos2") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=0.6)
p <- fviz_pca_ind(res.pca, label="none", habillage=iris$Species,
addEllipses=TRUE, ellipse.level=0.95)
print(p)
# Default plot
fviz_pca_var(res.pca)
# Use points and text
fviz_pca_var(res.pca, geom = c("point", "text"))
fviz_pca_biplot(res.pca)
library(gganimate)
#------------------------------------
# 2. transition_states()
#------------------------------------
anim <- p +
transition_states(Species,
transition_length = 2,
state_length = 1)
#states
#   The unquoted name of the column holding the state levels in the data.
#transition_length
#   The relative length of the transition. Will be recycled to match the number of states in the data
#state_length
#   The relative length of the pause at the states. Will be recycled to match the number of states in the data
#--------------------------------------------
# 3. ease_aes(), Control easing of aesthetics
#--------------------------------------------
anim +
ease_aes(y = 'bounce-out') # Sets special ease for y aesthetic
#> Loading required package: ggplot2
#gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation.
#It does this by providing a range of new grammar classes that can be added to the plot object
#in order to customise how it should change with time.
#transition_*() defines how the data should be spread out and how it relates to itself across time.
#view_*() defines how the positional scales should change along the animation.
#shadow_*() defines how data from other points in time should be presented in the given point in time.
#enter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.
#ease_aes() defines how different aesthetics should be eased during transitions.
# We'll start with a static plot
p <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_point()
#aes(colour = Species), size = 2
plot(p)
#------------------------------------
# 2. transition_states()
#------------------------------------
anim <- p +
transition_states(Species,
transition_length = 2,
state_length = 1)
#states
#   The unquoted name of the column holding the state levels in the data.
#transition_length
#   The relative length of the transition. Will be recycled to match the number of states in the data
#state_length
#   The relative length of the pause at the states. Will be recycled to match the number of states in the data
#--------------------------------------------
# 3. ease_aes(), Control easing of aesthetics
#--------------------------------------------
anim +
ease_aes(y = 'bounce-out') # Sets special ease for y aesthetic
##ease_aes() animation type
#quadratic Models a power-of-2 function
#cubic Models a power-of-3 function
#quartic Models a power-of-4 function
#quintic Models a power-of-5 function
#sine Models a sine function
#circular Models a pi/2 circle arc
#exponential Models an exponential function
#elastic Models an elastic release of energy
#back Models a pullback and relase
#bounce Models the bouncing of a ball
#modifier
#-in The easing function is applied as-is
#-out The easing function is applied in reverse
#-in-out The first half of the transition it is applied as-is, while in the last half it is reversed
anim +
ggtitle('Now showing {closest_state}',
subtitle = 'Frame {frame} of {nframes}')
#-------------------------------------
# 4. Enter and exit animation
#-------------------------------------
#https://rdrr.io/github/thomasp85/gganimate/man/enter_exit.html
anim2 <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_point(aes(colour = Species)) +
transition_states(Species,
transition_length = 2,
state_length = 1)
anim2 +
enter_fade() +
exit_shrink()
anim2 +
enter_fade() + enter_drift(x_mod = -1) +
exit_shrink() + exit_drift(x_mod = 5)
#-------------------------------------
# Now lets combined all that we know
#------------------------------------
#Example 1
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot() +
# Here comes the gganimate code
transition_states(
gear,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
#Example 2
#install.packages("gapminder")
library(gapminder)
ggplot(gapminder,aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy")+
transition_time(year) +
labs(title = "Year: {frame_time}")
#----------------------------------------------------------
# 5. Practical Data Plotting - Covid 19 Dataset
#----------------------------------------------------------
#https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide
library(utils)
COVID_19 <-  read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
COVID_19$cases <- COVID_19$cases_weekly
COVID_19$deaths <- COVID_19$deaths_weekly
COVID_19$dateRep <- as.Date(COVID_19$dateRep, tryFormats = c("%d/%m/%t"))
dim(COVID_19)
#11768    10
str(COVID_19)
#tibble [11,768 x 10] (S3: tbl_df/tbl/data.frame)
#$ dateRep                : POSIXct[1:11768], format: "2020-04-19" "2020-04-18" "2020-04-17" "2020-04-16" ...
#$ day                    : num [1:11768] 19 18 17 16 15 14 13 12 11 10 ...
#$ month                  : num [1:11768] 4 4 4 4 4 4 4 4 4 4 ...
#$ year                   : num [1:11768] 2020 2020 2020 2020 2020 2020 2020 2020 2020 2020 ...
#$ cases                  : num [1:11768] 63 51 10 70 49 58 52 34 37 61 ...
#$ deaths                 : num [1:11768] 0 1 4 2 2 3 0 3 0 1 ...
#$ countriesAndTerritories: chr [1:11768] "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
#$ geoId                  : chr [1:11768] "AF" "AF" "AF" "AF" ...
#$ countryterritoryCode   : chr [1:11768] "AFG" "AFG" "AFG" "AFG" ...
#$ popData2018            : num [1:11768] 37172386 37172386 37172386 37172386 37172386 ...
#########################################################################################################
library(dplyr)
Totalcases_in_All_Countries <-
COVID_19 %>% group_by(countriesAndTerritories) %>% summarise(Cases = sum(cases))
View(COVID_19)
Totalcases_in_All_Countries <-
COVID_19 %>% group_by(countriesAndTerritories) %>% summarise(Cases = sum(cases))
dim(COVID_19)
str(COVID_19)
library(dplyr)
Totalcases_in_All_Countries <-
COVID_19 %>% group_by(countriesAndTerritories) %>% summarise(Cases = sum(cases))
COVID_19$cases <- COVID_19$cases_weekly
COVID_19$deaths <- COVID_19$deaths_weekly
COVID_19$dateRep <- as.Date(COVID_19$dateRep, tryFormats = c("%d/%m/%t"))
dim(COVID_19)
str(COVID_19)
library(dplyr)
Totalcases_in_All_Countries <-
COVID_19 %>% group_by(countriesAndTerritories) %>% summarise(Cases = sum(cases))
View(COVID_19)
# install.packages("ggdendro")
library(ggplot2)
library(ggdendro)
theme_set(theme_bw())
hc <- hclust(dist(USArrests), "ave")  # hierarchical clustering
# plot
ggdendrogram(hc, rotate = TRUE, size = 2)
library(FactoMineR)
library(factoextra)
res.pca <- prcomp(iris[, -5],  scale = TRUE)
# Use points only
fviz_pca_ind(res.pca, geom="point")
# Gradient color
fviz_pca_ind(res.pca, col.ind="cos2") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=0.6)
p <- fviz_pca_ind(res.pca, label="none", habillage=iris$Species,
addEllipses=TRUE, ellipse.level=0.95)
print(p)
